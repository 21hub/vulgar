// # Base Units

// Approximately `1px` when calculated for a
// browser standard of `16px`
$base-unit: .063rem;

$margin-zero: 0;
$padding-zero: 0;

// # Responsive Grid Variables
// ## Define your custom responsive flexbox grid
$gutter-width: 1rem !default;
$outer-margin: 2rem !default;

$grid-config: (
 'column-count' : 12,
 'column-selector': '.col',
 'offset-modifier': 'offset',
 'gutter-compensation': (($gutter-width / 2) * -1),
 'half-gutter-width': ($gutter-width / 2)
);

$width: (
  'xs': 30,
  'sm': 48,
  'md': 62,
  'lg': 75
);

$viewport: (
  'xs': #{map-get($width, 'xs')}rem,
  'sm': #{map-get($width, 'sm')}rem,
  'md': #{map-get($width, 'md')}rem,
  'lg': #{map-get($width, 'lg')}rem,
);

$delimiters: (
  'block': '-',
  'element': '-',
  'modifier': '-'
);

$default-query: #{map-get($viewport, 'xs')} !default;

$sizes: (
  'xs': 'xs',
  'sm': 'sm',
  'md': 'md',
  'lg': 'lg'
);

$queries: (
  #{map-get($sizes, 'xs')}:#{map-get($viewport, 'xs')},
  #{map-get($sizes, 'sm')}:#{map-get($viewport, 'sm')},
  #{map-get($sizes, 'md')}:#{map-get($viewport, 'md')},
  #{map-get($sizes, 'lg')}:#{map-get($viewport, 'lg')}) !default;

$properties: (
  'column': ('flex-basis', 'max-width'),
  'offset': ('margin-left')
);

// # Colors

// ## Utility colors

$black: #000;
$white: #fff;

// ## Brand Color Variables

// define the base (default) color key
$brand-color-key: 'base'!default;

// keep color variables organized in a Sass `map`
// give each color a semantic name describing its role
$brand-colors: (
  'primary' : (
    'base' : #607D8B,
    'light' : #CFD8DC,
    'dark' : #455A64
  ),

  'accent' : (
    'base' : #9E9E9E
  ),

  'text' : (
    'base' : #B6B6B6,
    'dark' : #727272,
    'darker' : #212121
  ),

  'code': (
    'base': #B6B6B6
  ),

  'success': (
    'base': #3c763d,
    'light': #dff0d8
  ),

  'info': (
    'base': #31708f,
    'light': #d9edf7
  ),

  'warning': (
    'base': #8a6d3b,
    'light': #fcf8e3
  ),

  'danger': (
    'base': #a94442,
    'light': #f2dede
  )
);

// aggregate different semantic levels of opacity used in a
// project's design with Sass maps
$brand-opacity: (

  'light': .8, // opacity used with lighter colors
  'dark':  .4   // opacity used with darker colors
                // ... et cetera
);

// set tint/shade interval for use with the opacity level utility
// function
$color-interval: 10% !global;

// # Global Utility Functions

// * These functions are utilized in the creation of our
// * responsive framework

// ## Color Utility Functions

// Custom function to reference individual colors from custom Sass map
// example usage:
// `
// .brand-button {
//
//     background-color: brand-color('primary');
//
//     &:hover {
//         background-color: brand-color('primary', 'light');
//     }
//
//     &.transparent {
//         background-color: brand-color('primary',
//                           $opacity : 'light');
//     }
// }`

@function brand-color($name : 'primary',
                      $variant : $brand-color-key,
                      $opacity : 1) {
  $color : null;

  // Get the color spectrum
  $color-spectrum: map-get($brand-colors, $name);

  // Get the color variant
  @if $color-spectrum {
    $color: map-get($color-spectrum, $variant);
  }

  // Get the alpha setting
  $alpha: if(type-of($opacity) == 'number', $opacity,
    map-get($brand-opacity, $opacity));

  // Set the alpha of the color
  @if $alpha {
    $color: rgba($color, $alpha);
  }

  @return $color;
}

// ## tint/shade interval function
// for returning the tint/shade of the desired color, to the
// desired level
// example usage:
// `
// .panel {
//   background-color: brand-color-level('primary', 2);
// } `

@function brand-color-level($color-name: 'primary',
                            $variant: $brand-color-key,
                            $level: 0) {

  $color: brand-color($color-name, $variant);
  $color-base: if($level < 0, $black, $white);

  @return mix($color-base, $color, $level * $color-interval);
}

// ## opacity level function
// for adjusting the color based on given `$opacity` level using the
// `rgba()` function
// example usage:
//
// `$button-transparent-color: brand-color-alpha('primary', 'light');`
//
@function brand-color-alpha($name: 'primary', $opacity: 0) {

  $color: brand-color($name);

  // Get the name opacity level, if it exists
  @if map-key-exists($brand-opacity, $opacity) {
    $opacity: map-get($brand-opacity, $opacity);
  }

  // Use rgba() to manipulate the color's alpha level
  @return rgba($color, $opacity);
}

// ## typography functions

// Retrive responsive breakpoints based on semantic name
@function font-weight($key : 'normal') {

  @if map-has-key($font-weights, $key) {

    @return map-get($font-weights, $key);
  }

  @warn 'Unknown `{$key}` requested from $font-weights.';

  @return null;
}

// Retrive appropriate font-stack based on semantic name
@function font-stack($key : 'primary') {

  @if map-has-key($font-stacks, $key) {

    @return map-get($font-stacks, $key);
  }

  @warn 'Unknown `{$key}` requested from $font-stacks.';

  @return null;
}

// Retrieve appropriate type scaling based on semantic name
@function type-scale($level) {

  @if map-has-key($type-scale, $level) {

    @return map-get($type-scale, $level);
  }

  @warn 'Unknown `{$key}` requested from $type-scale.';

  @return null;
}

// Retrieve appropriate line-height based on numerical input
@function line-height($level) {

  @if map-has-key($line-heights, $level) {

    @return map-get($line-heights, $level);
  }

  @warn 'Unknown `{$key}` requested from $line-heights.';

  @return null;
}

// # Utility Mixins

// responsive media query mixin
// use the `map-get` function to fetch the corresponding value from the
// breakpoints map based on the passed in `key`
@mixin break($size) {
  $raw-query: (min-width: map-get($viewport, $size));

  @if $raw-query {
    $query: if(type-of($raw-query) == 'string',
      unquote($raw-query), inspect($raw-query));

    @media only screen and #{$query} {

      @content;
    }
  } @else {

    @error 'No value is found for `#{$breakpoint}`.'
           + 'Please make sure it is defined within '
           + '`$breakpoints` map.';
  }
}

// ## Clearfix
// For clearing floats
@mixin clearfix() {

  zoom: 1;

  &:before,
  &:after {

    content: '';
    display: table;
    // Fixes Opera/contenteditable bug:
    // http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
    line-height: 0;
  }

  &:after {
    clear: both;
  }
}

// ## Text overflow
// Requires `inline-block` or `block` for proper styling
@mixin text-overflow() {

  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
