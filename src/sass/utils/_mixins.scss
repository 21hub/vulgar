// # Utility Mixins

// ## Clearfix
// For clearing floats
@mixin clearfix() {

  zoom: 1;

  &:before,
  &:after {

    content: '';
    display: table;
    // Fixes Opera/contenteditable bug:
    // http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
    line-height: 0;
  }

  &:after {
    clear: both;
  }
}

// # Typography Mixins

// Mixin for setting the font-size and line-height according to
// a modular type scale.
// Example:
//   .heading-1 { @include type-setting(2); }
//   .heading-2 { @include type-setting(-1); }
//   .paragraph { @include type-setting(0); }
@mixin type-setting($level : 0) {

  font-size: type-scale($level);
  line-height: line-height($level);
}

@mixin type-setting($level) {
  font-size: type-scale($level);
  line-height: line-height($level);
}

// # Button Mixins
// for dynamically generating variations of the component
@mixin brand-button-theme($color,
                          $color-text-hover:
                                brand-color('primary', 'light')) {

  color: $color;
  border-color: $color;
  background-color: transparent;

  &:hover {

    background-color: $color;
    color: $color-text-hover;
  }
}

// # Panel Mixins
@mixin brand-panel-theme($panel-text-color,
                         $panel-heading-bg,
                         $panel-border: $panel-heading-bg) {

  color: $panel-text-color;
  border-color: $panel-border;
  background-color: $panel-heading-bg;
}

// responsive media query mixin
// use the `map-get` function to fetch the corresponding value from the
// breakpoints map based on the passed in `key`
@mixin break($size) {
  $raw-query: (min-width: map-get($viewport, $size));

  @if $raw-query {
    $query: if(type-of($raw-query) == 'string',
      unquote($raw-query), inspect($raw-query));

    @media only screen and #{$query} {

      @content;
    }
  } @else {

    @error 'No value is found for `#{$breakpoint}`.'
           + 'Please make sure it is defined within '
           + '`$breakpoints` map.';
  }
}

// # Grid Mixins
@mixin auto-width() {
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

@mixin percent-width($property, $columns, $count) {

  #{$property}: ((100% / $columns) * $count);
}

@mixin percent-offset($property, $columns, $count) {

  $single-column-width: ((100% / $columns) * 1);

  #{$property}: $single-column-width * $count;
}

@mixin queries($key, $queries) {

  $query: map-get($queries, $key);

  @if ($query == $default-query) {

    @content;
  } @else {

    @media screen and (min-width: #{$query}) {

      @content;
    }
  }
}

@mixin columns($selector: map-get($grid-config, 'column-selector'),
               $properties: map-get($properties, 'column'),
               $columns: map-get($grid-config, 'column-count'),
               $queries: $queries) {

  $block-delimiter: map-get($delimiters, 'block');
  $element-delimiter: map-get($delimiters, 'element');
  $modifier-delimiter: map-get($delimiters, 'modifier');

  @each $key, $size in $sizes {

    $iterator-selector: '';

    @for $i from 0 through $columns {

      @if ($i == 0) {

        $iterator-selector: #{$selector}#{$block-delimiter}#{$size};
      } @else {

        $iterator-selector: #{$selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$i};
      }

      #{$iterator-selector} {

        @extend %column;
      }
    }

    @include queries($size, $queries) {

      @for $i from 0 through $columns {

        @if ($i == 0) {
          #{$selector}#{$block-delimiter}#{$size} {

            @content;
            @include auto-width();
          }
        } @else {

          #{$selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$i} {

            @content;

            @each $prop in $properties {

              @include percent-width($prop, $columns, $i);
            }
          }
        }
      }
    }
  }
}

@mixin offsets($selector: map-get($grid-config, 'column-selector'),
              $modifier-selector: map-get($grid-config, 'offset-modifier'),
              $properties: map-get($properties, 'offset'),
              $columns: map-get($grid-config, 'column-count'),
              $queries: $queries) {

  $block-delimiter: map-get($delimiters, 'block');
  $element-delimiter: map-get($delimiters, 'element');
  $modifier-delimiter: map-get($delimiters, 'modifier');

  @each $key, $size in $sizes {

    @for $i from 1 through $columns {

      #{$selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$modifier-selector}#{$modifier-delimiter}#{$i} {

        @extend %column;
      }
    }

    @include queries($size, $queries) {

      @for $i from 1 through $columns {

        #{$selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$modifier-selector}#{$modifier-delimiter}#{$i} {

          @content;

          @each $prop in $properties {

            @include percent-offset($prop, $columns, $i);
          }
        }
      }
    }
  }
}

@mixin breakpoints($selector, $queries: $queries) {

  $modifier-delimiter: map-get($delimiters, 'modifier');

  @each $key, $size in $sizes {

    #{$selector}#{$modifier-delimiter}#{$size} {

      @include queries($size, $queries) {

        @content;
      }
    }
  }
}

@mixin bg-img-full($url) {

  background-image: url($url);

  // Center the image vertically and horizontally
  background-position: center center;

  background-repeat: no-repeat;

  // Background image is fixed in the viewport so that it doesn't
  // move when the content's height is greater than the image's
  // height
  // Changed to scroll to fix image loading problem
  background-attachment: scroll;

  // Image will rescale based on its container's size
  background-size: cover;

  background-color: $color-white;
}
